import cv2
import face_recognition
import os
import numpy as np
import mysql.connector
from datetime import datetime

# === MySQL DATABASE CONNECTION ===
db = mysql.connector.connect(
    host="localhost",
    user="attendance_user",  # Change this if needed
    password="your_password",  # Change this if needed
    database="attendance_system"
)
cursor = db.cursor()

# === LOAD KNOWN FACES ===
IMAGE_PATH = "faces"

def load_faces():
    known_encodings, known_names = [], []
    
    for file in os.listdir(IMAGE_PATH):
        if file.endswith((".jpg", ".png", ".jpeg")):
            img_path = os.path.join(IMAGE_PATH, file)
            img = face_recognition.load_image_file(img_path)
            encodings = face_recognition.face_encodings(img)

            if encodings:  # Ensure at least one face is found
                known_encodings.append(encodings[0])

                # Extract name from filename (keeping original naming structure)
                name_parts = file.rsplit("_", 1)  # Splits at last underscore
                name = name_parts[0].replace("_", " ")  # Converts "John_Doe" to "John Doe"
                known_names.append(name)

    return known_encodings, known_names

known_encodings, known_names = load_faces()
print(f"Loaded {len(known_names)} known faces:", known_names)

# === START VIDEO FEED (CCTV or Webcam) ===
video_capture = cv2.VideoCapture(0)  # Use 0 for default webcam, or replace with CCTV IP stream

def mark_attendance(name):
    now = datetime.now()
    current_date = now.strftime('%Y-%m-%d')
    current_time = now.strftime('%H:%M:%S')

    # Check if the user already has an "IN" record today
    cursor.execute("SELECT id, time_in, time_out FROM attendance WHERE name=%s AND date=%s", (name, current_date))
    result = cursor.fetchone()

    if result is None:
        # If no record today, mark as "IN"
        cursor.execute("INSERT INTO attendance (name, date, time_in) VALUES (%s, %s, %s)", (name, current_date, current_time))
        db.commit()
        print(f"[INFO] {name} marked IN at {current_time}")
    
    else:
        # If already has "IN", update "OUT" with the latest time
        attendance_id, time_in, time_out = result
        cursor.execute("UPDATE attendance SET time_out = %s WHERE id = %s", (current_time, attendance_id))
        db.commit()
        print(f"[INFO] {name} marked OUT at {current_time}")

while True:
    ret, frame = video_capture.read()
    if not ret:
        print("[ERROR] Could not read from camera.")
        break

    # Resize frame for faster processing
    small_frame = cv2.resize(frame, (0, 0), fx=0.5, fy=0.5)
    rgb_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

    # Detect faces in the frame
    face_locations = face_recognition.face_locations(rgb_frame)
    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)

    for face_encoding, face_location in zip(face_encodings, face_locations):
        matches = face_recognition.compare_faces(known_encodings, face_encoding, tolerance=0.5)
        name = "Unknown"

        face_distances = face_recognition.face_distance(known_encodings, face_encoding)
        best_match_index = np.argmin(face_distances) if len(face_distances) > 0 else None

        if best_match_index is not None and matches[best_match_index]:
            name = known_names[best_match_index]
            mark_attendance(name)

        # Draw bounding box around the detected face
        top, right, bottom, left = [v * 2 for v in face_location]  # Scale back to original size
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

    # Show the video feed
    cv2.imshow("Attendance System", frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close OpenCV windows
video_capture.release()
cv2.destroyAllWindows()
